[{"C:\\Git\\react-tests\\src\\index.js":"1","C:\\Git\\react-tests\\src\\redux\\store.ts":"2","C:\\Git\\react-tests\\src\\layouts\\main-layout.tsx":"3","C:\\Git\\react-tests\\src\\redux\\containers\\common\\request-loader.tsx":"4","C:\\Git\\react-tests\\src\\redux\\root-reducer.ts":"5","C:\\Git\\react-tests\\src\\redux\\root-saga.ts":"6","C:\\Git\\react-tests\\src\\redux\\containers\\github-repos\\with-github-repos.tsx":"7","C:\\Git\\react-tests\\src\\pages\\math\\math.tsx":"8","C:\\Git\\react-tests\\src\\components\\common\\menu.tsx":"9","C:\\Git\\react-tests\\src\\redux\\reducers\\github-repos.ts":"10","C:\\Git\\react-tests\\src\\redux\\reducers\\req-status.ts":"11","C:\\Git\\react-tests\\src\\redux\\sagas\\github-repos.ts":"12","C:\\Git\\react-tests\\src\\redux\\actions\\github-repos.ts":"13","C:\\Git\\react-tests\\src\\pages\\math\\math-matrix.tsx":"14","C:\\Git\\react-tests\\src\\pages\\math\\math-brackets.tsx":"15","C:\\Git\\react-tests\\src\\pages\\github-repos\\github-repos.tsx":"16","C:\\Git\\react-tests\\src\\components\\buttons\\custom-button.tsx":"17","C:\\Git\\react-tests\\src\\redux\\actions\\req-status.ts":"18","C:\\Git\\react-tests\\src\\redux\\types\\github-repos.ts":"19","C:\\Git\\react-tests\\src\\redux\\types\\req-status.ts":"20","C:\\Git\\react-tests\\src\\report-web-vitals.js":"21","C:\\Git\\react-tests\\src\\redux\\utils\\api.ts":"22","C:\\Git\\react-tests\\src\\pages\\github-repos\\github-repos-list.tsx":"23","C:\\Git\\react-tests\\src\\pages\\github-repos\\github-repos-item.tsx":"24","C:\\Git\\react-tests\\src\\components\\data-input\\custom-input.tsx":"25"},{"size":1316,"mtime":1609174234020,"results":"26","hashOfConfig":"27"},{"size":555,"mtime":1609093557750,"results":"28","hashOfConfig":"27"},{"size":774,"mtime":1609142838089,"results":"29","hashOfConfig":"27"},{"size":1052,"mtime":1609174799004,"results":"30","hashOfConfig":"27"},{"size":595,"mtime":1609174254685,"results":"31","hashOfConfig":"27"},{"size":234,"mtime":1609174880306,"results":"32","hashOfConfig":"27"},{"size":2926,"mtime":1609177400432,"results":"33","hashOfConfig":"27"},{"size":361,"mtime":1609175470924,"results":"34","hashOfConfig":"27"},{"size":1350,"mtime":1609142104083,"results":"35","hashOfConfig":"27"},{"size":623,"mtime":1609177400458,"results":"36","hashOfConfig":"27"},{"size":622,"mtime":1609175246571,"results":"37","hashOfConfig":"27"},{"size":914,"mtime":1609146387578,"results":"38","hashOfConfig":"27"},{"size":534,"mtime":1609174799000,"results":"39","hashOfConfig":"27"},{"size":4519,"mtime":1609175407009,"results":"40","hashOfConfig":"27"},{"size":2276,"mtime":1609174694256,"results":"41","hashOfConfig":"27"},{"size":970,"mtime":1609179615688,"results":"42","hashOfConfig":"27"},{"size":749,"mtime":1609178383682,"results":"43","hashOfConfig":"27"},{"size":431,"mtime":1609175708655,"results":"44","hashOfConfig":"27"},{"size":698,"mtime":1609177400454,"results":"45","hashOfConfig":"27"},{"size":351,"mtime":1609175640237,"results":"46","hashOfConfig":"27"},{"size":394,"mtime":1609146306213,"results":"47","hashOfConfig":"27"},{"size":1622,"mtime":1609177400450,"results":"48","hashOfConfig":"27"},{"size":827,"mtime":1609177473478,"results":"49","hashOfConfig":"27"},{"size":484,"mtime":1609177400424,"results":"50","hashOfConfig":"27"},{"size":562,"mtime":1609179430686,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1kttjeq",{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"58"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"83","usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"58"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"58"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"C:\\Git\\react-tests\\src\\index.js",[],[],"C:\\Git\\react-tests\\src\\redux\\store.ts",["110"],"import {applyMiddleware, createStore} from 'redux'\r\nimport {logger} from 'redux-logger'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\nimport {rootReducer} from './root-reducer'\r\nimport rootSaga from './root-saga'\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nconst configureStore = () => {\r\n    const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware, logger)))\r\n    sagaMiddleware.run(rootSaga)\r\n    return store\r\n}\r\n\r\nexport default configureStore\r\n",[],"C:\\Git\\react-tests\\src\\layouts\\main-layout.tsx",[],"C:\\Git\\react-tests\\src\\redux\\containers\\common\\request-loader.tsx",[],"C:\\Git\\react-tests\\src\\redux\\root-reducer.ts",[],"C:\\Git\\react-tests\\src\\redux\\root-saga.ts",["111"],"import {all, call} from 'redux-saga/effects'\r\nimport {watchGetOrganizationRepositories} from './sagas/github-repos'\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        call(watchGetOrganizationRepositories)\r\n    ])\r\n}\r\n","C:\\Git\\react-tests\\src\\redux\\containers\\github-repos\\with-github-repos.tsx",[],"C:\\Git\\react-tests\\src\\pages\\math\\math.tsx",[],"C:\\Git\\react-tests\\src\\components\\common\\menu.tsx",[],"C:\\Git\\react-tests\\src\\redux\\reducers\\github-repos.ts",[],"C:\\Git\\react-tests\\src\\redux\\reducers\\req-status.ts",[],"C:\\Git\\react-tests\\src\\redux\\sagas\\github-repos.ts",["112","113"],"import {call, put, takeEvery} from 'redux-saga/effects'\r\nimport {fetchOrganizationRepositoriesApi} from '../utils/api'\r\nimport {receiveOrganizationRepositoriesAction} from '../actions/github-repos'\r\nimport * as types from '../types/github-repos'\r\nimport {reqErrorAction, reqStatusAction} from '../actions/req-status'\r\n\r\n\r\nexport function* watchGetOrganizationRepositories() {\r\n    yield takeEvery(types.FETCH_ORGANIZATION_REPOSITORIES, callGetOrganizationRepositories)\r\n}\r\n\r\nfunction* callGetOrganizationRepositories({payload}: types.FetchReposAction) {\r\n    try {\r\n        const response = yield call(fetchOrganizationRepositoriesApi, payload)\r\n        yield put(reqStatusAction(true))\r\n        yield put(receiveOrganizationRepositoriesAction(response.data))\r\n        yield put(reqStatusAction(false))\r\n    } catch(error) {\r\n        console.log(error, 'error')\r\n        yield put(reqErrorAction(true))\r\n    }\r\n}\r\n","C:\\Git\\react-tests\\src\\redux\\actions\\github-repos.ts",["114","115"],"import * as actions from '../types/github-repos'\r\n\r\nexport function fetchOrganizationRepositoriesAction(organization: actions.FetchReposAction['payload']): actions.FetchReposAction {\r\n    return {\r\n        type: actions.FETCH_ORGANIZATION_REPOSITORIES,\r\n        payload: organization\r\n    }\r\n}\r\n\r\nexport function receiveOrganizationRepositoriesAction(repos: actions.ReceiveReposAction['payload']): actions.ReceiveReposAction {\r\n    return {\r\n        type: actions.RECEIVE_ORGANIZATION_REPOSITORIES,\r\n        payload: repos\r\n    }\r\n}\r\n","C:\\Git\\react-tests\\src\\pages\\math\\math-matrix.tsx",["116"],"/**\r\n * Test data provided with specified rows\\columns.\r\n * Matrix doesn't work with \"Exponent\" and \"-\" symbol that provided by default input \"type=number\" directive. To beat it we should use something like IMask.\r\n * Also matrix doesn't work with just single row or column. That's it.\r\n */\r\n\r\nimport React from 'react'\r\n\r\nexport class MathMatrix extends React.PureComponent<Record<string, never>, IState> {\r\n    constructor(props: Record<string, never>) {\r\n        super(props)\r\n        this.state = {\r\n            twoDimensionalArray: undefined,\r\n            rows: 4,\r\n            columns: 6\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Mounting component and immediately generating demo-matrix that further will free to change.\r\n     */\r\n    componentDidMount(): void {\r\n        this.generate2DArray()\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const {rows, columns} = this.state\r\n\r\n        return (\r\n            <div className=\"math-matrix\">\r\n                <div className=\"math-matrix__form\">\r\n                    <input type=\"number\"\r\n                        placeholder=\"rows\"\r\n                        value={rows}\r\n                        onChange={this.handleDimensions('rows')}\r\n                    />\r\n                    <input type=\"number\"\r\n                        placeholder=\"columns\"\r\n                        value={columns}\r\n                        onChange={this.handleDimensions('columns')}\r\n                    />\r\n                    <button onClick={() => this.generate2DArray()}>Generate matrix</button>\r\n                </div>\r\n                {this.matrix}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    generate2DArray = (): void => {\r\n        const {rows, columns} = this.state\r\n        const arr: Array<Array<number>> = []\r\n        let currentCount = 1\r\n        let rowStart = 0\r\n        let rowEnd = rows - 1\r\n        let colStart = 0\r\n        let colEnd = columns - 1\r\n\r\n        while (rowStart <= rowEnd && colStart <= colEnd) {\r\n            /**\r\n             * Generating first-top row\r\n             */\r\n            for (let i = colStart; i <= colEnd; i++) {\r\n                arr[rowStart] = arr[rowStart] || []\r\n                arr[rowStart][i] = currentCount\r\n                currentCount++\r\n            }\r\n            rowStart++\r\n\r\n            /**\r\n             * Generating cols from right to left\r\n             */\r\n            for (let i = rowStart; i <= rowEnd; i++) {\r\n                arr[i] = arr[i] || []\r\n                arr[i][colEnd] = currentCount\r\n                currentCount++\r\n            }\r\n            colEnd--\r\n\r\n            /**\r\n             * Making the bottom row\r\n             */\r\n            for (let i = colEnd; i >= colStart; i--) {\r\n                arr[rowEnd][i] = currentCount\r\n                currentCount++\r\n            }\r\n            rowEnd--\r\n\r\n            /**\r\n             * Generating from botom to top\r\n             */\r\n            for (let i = rowEnd; i >= rowStart; i--) {\r\n                arr[i][colStart] = currentCount\r\n                currentCount++\r\n            }\r\n            colStart++\r\n        }\r\n        /**\r\n         * Finally after assigning numbers and build matrix we setting state\r\n         */\r\n        this.setState({twoDimensionalArray: arr})\r\n    }\r\n\r\n    /**\r\n     * getter that computes and render matrix right after we invoke \"Generate2DArray\".\r\n     */\r\n    get matrix(): JSX.Element {\r\n        const {twoDimensionalArray} = this.state\r\n        const rows = twoDimensionalArray?.map((row, index) => {\r\n            const rowItem = row.map((item, index) => {\r\n                return (\r\n                    <div key={index}\r\n                        className=\"math-matrix__matrix-item\"\r\n                    >{item}</div>\r\n                )\r\n            })\r\n            return (\r\n                <div key={index}\r\n                    className=\"math-matrix__matrix-row\"\r\n                >\r\n                    {rowItem}\r\n                </div>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <div className=\"math-matrix__matrix-wrapper\">\r\n                {rows}\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param type accepts only two types: rows and columns.\r\n     */\r\n    handleDimensions = (type: 'rows' | 'columns') => (e: React.SyntheticEvent): void => {\r\n        this.setState({[type]: (e.target as HTMLTextAreaElement).value} as unknown as Pick<IState, keyof IState>)\r\n    }\r\n}\r\n\r\ninterface IState {\r\n    twoDimensionalArray?: Array<Array<number>>\r\n    rows: number,\r\n    columns: number\r\n}\r\n","C:\\Git\\react-tests\\src\\pages\\math\\math-brackets.tsx",[],"C:\\Git\\react-tests\\src\\pages\\github-repos\\github-repos.tsx",["117","118"],"C:\\Git\\react-tests\\src\\components\\buttons\\custom-button.tsx",[],"C:\\Git\\react-tests\\src\\redux\\actions\\req-status.ts",[],"C:\\Git\\react-tests\\src\\redux\\types\\github-repos.ts",[],"C:\\Git\\react-tests\\src\\redux\\types\\req-status.ts",[],"C:\\Git\\react-tests\\src\\report-web-vitals.js",["119","120"],"C:\\Git\\react-tests\\src\\redux\\utils\\api.ts",["121","122","123"],"import AXIOS, {AxiosResponse} from 'axios'\r\nimport {GithubReposItem} from '../types/github-repos'\r\n\r\nconst api = 'https://api.github.com'\r\n\r\ntype RequestTypes<URL = string, Options = Record<string, unknown>, Data = Record<string, unknown>> = {\r\n    get: (url: URL, options?: Options) => Promise<void | AxiosResponse>\r\n    post: (url: URL, data: Data, options?: Options) => Promise<void | AxiosResponse>\r\n    patch: (url: URL, data: Data, options?: Options) => Promise<void | AxiosResponse>\r\n    put: (url: URL, data: Data, options?: Options) => Promise<void | AxiosResponse>\r\n    delete: (url: URL, options?: Options) => Promise<void | AxiosResponse>\r\n}\r\n\r\nexport const axios: RequestTypes = {\r\n    get: (url, options) => AXIOS.get(url, options).catch(errorHandler),\r\n    post: (url, data, options) => AXIOS.post(url, data, options).catch(errorHandler),\r\n    patch: (url, data, options) => AXIOS.patch(url, data, options).catch(errorHandler),\r\n    put: (url, data, options) => AXIOS.put(url, data, options).catch(errorHandler),\r\n    delete: (url, options) => AXIOS.delete(url, options).catch(errorHandler)\r\n}\r\n\r\nfunction errorHandler(error: {response: {status: number}}) {\r\n    const status = error.response ? error.response.status : undefined\r\n    switch (status) {\r\n    case 401: {\r\n        console.log('err 401')\r\n        break\r\n    }\r\n    default: console.log('OK')\r\n    }\r\n    throw error\r\n}\r\n\r\nexport function fetchOrganizationRepositoriesApi(organization = 'X7Becka'): Promise<void | AxiosResponse<GithubReposItem[]>> {\r\n    console.log('API')\r\n    return axios.get(`${api}/orgs/${organization}/repos`)\r\n}\r\n","C:\\Git\\react-tests\\src\\pages\\github-repos\\github-repos-list.tsx",[],"C:\\Git\\react-tests\\src\\pages\\github-repos\\github-repos-item.tsx",[],"C:\\Git\\react-tests\\src\\components\\data-input\\custom-input.tsx",[],{"ruleId":"124","severity":1,"message":"125","line":10,"column":24,"nodeType":"126","messageId":"127","endLine":10,"endColumn":29},{"ruleId":"124","severity":1,"message":"125","line":4,"column":16,"nodeType":"128","messageId":"127","endLine":4,"endColumn":36},{"ruleId":"124","severity":1,"message":"125","line":8,"column":8,"nodeType":"128","messageId":"127","endLine":8,"endColumn":52},{"ruleId":"129","severity":1,"message":"130","line":19,"column":9,"nodeType":"131","messageId":"132","endLine":19,"endColumn":20},{"ruleId":"133","severity":1,"message":"134","line":1,"column":26,"nodeType":"135","messageId":"136","endLine":1,"endColumn":49,"fix":"137"},{"ruleId":"138","severity":1,"message":"139","line":1,"column":49,"nodeType":"140","messageId":"141","endLine":1,"endColumn":50,"fix":"142"},{"ruleId":"124","severity":1,"message":"125","line":137,"column":54,"nodeType":"126","messageId":"127","endLine":137,"endColumn":82},{"ruleId":"129","severity":1,"message":"130","line":9,"column":9,"nodeType":"131","messageId":"132","endLine":9,"endColumn":20},{"ruleId":"129","severity":1,"message":"130","line":24,"column":9,"nodeType":"131","messageId":"132","endLine":24,"endColumn":20},{"ruleId":"124","severity":1,"message":"125","line":1,"column":25,"nodeType":"126","messageId":"127","endLine":1,"endColumn":39},{"ruleId":"124","severity":1,"message":"143","line":1,"column":25,"nodeType":"144","messageId":"145","endLine":1,"endColumn":36},{"ruleId":"129","severity":1,"message":"130","line":26,"column":9,"nodeType":"131","messageId":"132","endLine":26,"endColumn":20},{"ruleId":"129","severity":1,"message":"130","line":29,"column":14,"nodeType":"131","messageId":"132","endLine":29,"endColumn":25},{"ruleId":"129","severity":1,"message":"130","line":35,"column":5,"nodeType":"131","messageId":"132","endLine":35,"endColumn":16},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","FunctionDeclaration","no-console","Unexpected console statement.","MemberExpression","unexpected","quotes","Strings must use singlequote.","Literal","wrongQuotes",{"range":"146","text":"147"},"semi","Extra semicolon.","ImportDeclaration","extraSemi",{"range":"148","text":"149"},"Argument 'onPerfEntry' should be typed.","Identifier","missingArgType",[25,48],"'../types/github-repos'",[25,59],"\"../types/github-repos\"\r\n\r\nexport"]