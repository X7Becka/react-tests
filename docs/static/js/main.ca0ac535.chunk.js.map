{"version":3,"sources":["redux/types/github-repos.ts","redux/containers/github-repos/with-github-repos.tsx","redux/actions/github-repos.ts","pages/github-repos/github-repos.tsx","pages/math/math-matrix.tsx","pages/math/math-brackets.tsx","pages/math/math.tsx","layouts/main-layout.tsx","reportWebVitals.js","redux/reducers/github-repos.ts","redux/actions/req-status.ts","redux/reducers/req-status.ts","redux/root-reducer.ts","redux/utils/api.js","redux/sagas/github-repos.ts","redux/root-saga.ts","redux/store.ts","index.js"],"names":["FETCH_ORGANIZATION_REPOSITORIES","RECEIVE_ORGANIZATION_REPOSITORIES","withGithubRepos","ChildComponent","GithubReposContainer","componentDidMount","_init","render","props","githubRepos","console","log","fetchOrganizationRepositories","React","PureComponent","connect","store","reqStatus","dispatch","organization","type","actions","payload","GithubRepos","this","MathMatrix","generate2DArray","state","arr","currentCount","rowStart","rowEnd","rows","colStart","colEnd","columns","i","setState","twoDimensionalArray","handleDimensions","e","target","value","className","placeholder","onChange","onClick","matrix","map","row","index","rowItem","item","MathBrackets","isBracketStructureValid","expression","brackets","bin","symbol","bracketIndex","indexOf","push","pop","Math","MainLayout","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","repositoryList","REQ_STATUS","REQ_ERROR","reqStatusAction","isFetching","error","rootReducer","combineReducers","action","api","axios","url","options","AXIOS","get","catch","errorHandler","response","status","fetchOrganizationRepositoriesApi","watchGetOrganizationRepositories","callGetOrganizationRepositories","takeEvery","types","call","put","repos","data","rootSaga","all","sagaMiddleware","createSagaMiddleware","createStore","composeWithDevTools","applyMiddleware","logger","run","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca0ac535.chunk.js","sourcesContent":["export const FETCH_ORGANIZATION_REPOSITORIES = \"githubRepos/FETCH_ORGANIZATION_REPOSITORIES\"\r\nexport interface FetchReposAction {\r\n    type: typeof FETCH_ORGANIZATION_REPOSITORIES\r\n    payload: string\r\n}\r\n\r\nexport const RECEIVE_ORGANIZATION_REPOSITORIES = \"githubRepos/RECEIVE_ORGANIZATION_REPOSITORIES\"\r\nexport interface ReceiveReposAction {\r\n    type: typeof RECEIVE_ORGANIZATION_REPOSITORIES\r\n    payload: Array<RepoItemType>\r\n}\r\n\r\nexport type GithubReposAction =\r\n    | FetchReposAction\r\n    | ReceiveReposAction\r\n\r\nexport type InitialStateGithubReposType = {\r\n    repositoryList: object[] | []\r\n}\r\n\r\n// interface FETCH_ORGANIZATION_REPOSITORIES {\r\n//     type: string\r\n//     payload: string\r\n// }\r\n//\r\n// interface RECEIVE_ORGANIZATION_REPOSITORIES {\r\n//     type: string\r\n//     payload: Array<RepoItemType>\r\n// }\r\n\r\n// export type GithubReposActionType = FETCH_ORGANIZATION_REPOSITORIES | RECEIVE_ORGANIZATION_REPOSITORIES\r\n\r\nexport type ACTIONS_GET_ORGANIZATION_REPOSITORIES = string\r\n\r\nexport interface withGithubReposTProps {\r\n    fetchOrganizationRepositories: (organization?: string) => void,\r\n    githubRepos: repositoryListType\r\n}\r\n\r\nexport type githubReposTProps = {\r\n    githubRepos: repositoryListType\r\n}\r\n\r\nexport type repositoryListType = {\r\n    repositoryList: Array<RepoItemType>\r\n}\r\n\r\nexport type RepoItemType = {\r\n    id: number;\r\n    name: string;\r\n    git_url: string;\r\n    forks: number;\r\n    watchers: number;\r\n    stargazers_count: number;\r\n}\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from \"../../actions/github-repos\";\r\nimport {withGithubReposTProps} from \"../../types/github-repos\";\r\nimport {AppState} from \"../../root-reducer\";\r\n\r\nexport const withGithubRepos = <P extends object> (ChildComponent: React.ComponentType<P>) => {\r\n    class GithubReposContainer extends React.PureComponent <withGithubReposTProps> {\r\n\r\n        componentDidMount = () => {\r\n            this._init();\r\n        }\r\n\r\n        render = () => {\r\n            const {githubRepos} = this.props;\r\n            const props = {\r\n                githubRepos\r\n            };\r\n            return <ChildComponent {...props as P}/>;\r\n        }\r\n\r\n        _init = () => {\r\n            console.log(this.props, 'this.props')\r\n            this.props.fetchOrganizationRepositories(\"adobe\")\r\n        }\r\n    }\r\n\r\n    const mapDispatchToProps = (dispatch: any) => {\r\n        return {\r\n            // setReqStatus: (isFetching: any) => dispatch(reqStatusAction(isFetching))\r\n            fetchOrganizationRepositories: (organization: string) => dispatch(actions.fetchOrganizationRepositoriesAction(organization))\r\n        };\r\n    };\r\n\r\n    const mapStateToProps = (store: AppState) => {\r\n        return {\r\n            reqStatus: store.reqStatus,\r\n            githubRepos: store.githubRepos\r\n        };\r\n    };\r\n\r\n    // @ts-ignore\r\n    return connect<P, ReturnType<typeof mapStateToProps>>(mapStateToProps, mapDispatchToProps)(GithubReposContainer);\r\n};\r\n","import {call, put} from 'redux-saga/effects'\r\nimport {ACTIONS_GET_ORGANIZATION_REPOSITORIES, RepoItemType} from \"../types/github-repos\";\r\nimport {fetchOrganizationRepositoriesApi} from \"../utils/api\";\r\nimport * as actions from \"../types/github-repos\";\r\n\r\n// export const FETCH_ORGANIZATION_REPOSITORIES = \"FETCH_ORGANIZATION_REPOSITORIES\";\r\n// export const RECEIVE_ORGANIZATION_REPOSITORIES = \"RECEIVE_ORGANIZATION_REPOSITORIES\";\r\n\r\nexport function fetchOrganizationRepositoriesAction(organization: string): actions.FetchReposAction {\r\n    return {\r\n        type: actions.FETCH_ORGANIZATION_REPOSITORIES,\r\n        payload: organization\r\n    }\r\n}\r\n\r\nexport function receiveOrganizationRepositoriesAction(repos: Array<RepoItemType>): actions.ReceiveReposAction {\r\n    return {\r\n        type: actions.RECEIVE_ORGANIZATION_REPOSITORIES,\r\n        payload: repos\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {githubReposTProps} from \"../../redux/types/github-repos\";\r\n\r\nexport class GithubRepos extends React.PureComponent <githubReposTProps> {\r\n    render() {\r\n        console.log(this.props, 'this.props')\r\n        return (\r\n            <div>\r\n                test\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/**\r\n * Test data provided with specified rows\\columns.\r\n * Matrix doesn't work with \"Exponent\" and \"-\" symbol that provided by default input \"type=number\" directive. To beat it we should use something like IMask.\r\n * Also matrix doesn't work with just single row or column. That's it.\r\n */\r\n\r\nimport React from 'react';\r\n\r\nexport class MathMatrix extends React.PureComponent<{}, IState> {\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = {\r\n            twoDimensionalArray: null,\r\n            rows: 4,\r\n            columns: 6\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Mounting component and immediately generating demo-matrix that further will free to change.\r\n     */\r\n    componentDidMount() {\r\n        this.generate2DArray()\r\n    }\r\n\r\n    render() {\r\n        const {rows, columns} = this.state\r\n\r\n        return (\r\n            <div className=\"math-matrix\">\r\n                <div className=\"math-matrix__form\">\r\n                    <input type=\"number\" placeholder=\"rows\" value={rows} onChange={this.handleDimensions(\"rows\")}/>\r\n                    <input type=\"number\" placeholder=\"columns\" value={columns} onChange={this.handleDimensions(\"columns\")}/>\r\n                    <button onClick={() => this.generate2DArray()}>Generate matrix</button>\r\n                </div>\r\n                {this.matrix}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    generate2DArray = () => {\r\n        const {rows, columns} = this.state\r\n        const arr: Array<Array<number>> = [];\r\n        let currentCount = 1\r\n        let rowStart = 0\r\n        let rowEnd = rows - 1\r\n        let colStart = 0\r\n        let colEnd = columns - 1\r\n\r\n        while (rowStart <= rowEnd && colStart <= colEnd) {\r\n            /**\r\n             * Generating first-top row\r\n             */\r\n            for (let i = colStart; i <= colEnd; i++) {\r\n                arr[rowStart] = arr[rowStart] || []\r\n                arr[rowStart][i] = currentCount\r\n                currentCount++\r\n            }\r\n            rowStart++\r\n\r\n            /**\r\n             * Generating cols from right to left\r\n             */\r\n            for (let i = rowStart; i <= rowEnd; i++) {\r\n                arr[i] = arr[i] || []\r\n                arr[i][colEnd] = currentCount\r\n                currentCount++\r\n            }\r\n            colEnd--\r\n\r\n            /**\r\n             * Making the bottom row\r\n             */\r\n            for (let i = colEnd; i >= colStart; i--) {\r\n                arr[rowEnd][i] = currentCount\r\n                currentCount++\r\n            }\r\n            rowEnd--\r\n\r\n            /**\r\n             * Generating from botom to top\r\n             */\r\n            for (let i = rowEnd; i >= rowStart; i--) {\r\n                arr[i][colStart] = currentCount\r\n                currentCount++\r\n            }\r\n            colStart++\r\n        }\r\n        /**\r\n         * Finally after assigning numbers and build matrix we setting state\r\n         */\r\n        this.setState({twoDimensionalArray: arr})\r\n    }\r\n\r\n    /**\r\n     * getter that computes and render matrix right after we invoke \"Generate2DArray\".\r\n     */\r\n    get matrix() {\r\n        const {twoDimensionalArray} = this.state\r\n        const rows = twoDimensionalArray?.map((row, index) => {\r\n            const rowItem = row.map((item, index) => {\r\n                return (\r\n                    <div key={index} className=\"math-matrix__matrix-item\">{item}</div>\r\n                )\r\n            })\r\n            return (\r\n                <div key={index} className=\"math-matrix__matrix-row\">\r\n                    {rowItem}\r\n                </div>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <div className=\"math-matrix__matrix-wrapper\">\r\n                {rows}\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    /**\r\n     *\r\n     * @param type accepts only two types: rows and columns.\r\n     */\r\n    handleDimensions = (type: \"rows\" | \"columns\") => (e: React.SyntheticEvent) => {\r\n        this.setState({[type]: (e.target as HTMLTextAreaElement).value} as unknown as Pick<IState, keyof IState>)\r\n    }\r\n}\r\n\r\ninterface IState {\r\n    twoDimensionalArray: null | Array<Array<number>>\r\n    rows: number,\r\n    columns: number\r\n}\r\n","import React from 'react';\r\n\r\nexport class MathBrackets extends React.PureComponent {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"math-expression\">\r\n                <div className=\"math-expression__title\">Expression-balance checking</div>\r\n                {this.isBracketStructureValid(\"(({{1+3}[4+<3-5>]))\", \"(){}[]\")}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // isBracketStructureValid = (expression: string) => {\r\n    // const brackets = [\"(\", \")\", \"{\", \"}\", \"[\", \"]\"]\r\n    // let isFound = true\r\n    // for (let i = 0; i < expression.length - 1;i++) {\r\n    //         switch (Array.from(expression)[i]) {\r\n    //             case \"(\": {\r\n    //                 for (let symbol = i; symbol < expression.length - i;symbol++) {\r\n    //                     isFound = false\r\n    //                     if (Array.from(expression)[symbol] === \")\") isFound = true\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //     console.log(!isFound ? 'ERR' : \"!ERR\", '!isFound')\r\n    //\r\n    // }\r\n    // }\r\n    /**\r\n     * @param expression\r\n     * @param brackets\r\n     */\r\n    isBracketStructureValid = (expression: string, brackets: string) => {\r\n        /**\r\n         * Temporary array to contain open brackets\r\n         */\r\n        let bin = []\r\n        /**\r\n         * Here we passing an expression by every symbol\r\n         */\r\n        for (let symbol of expression) {\r\n            /**\r\n             * Getting an index of bracket.\r\n             * So if current symbol aren't equal any of bracket in parameter - we're getting the next symbol.\r\n             */\r\n            let bracketIndex = brackets.indexOf(symbol)\r\n            if (bracketIndex === -1) continue\r\n\r\n            /**\r\n             * Getting open-bracket. If so - we pushing close bracket (next to open)\r\n             */\r\n            if (bracketIndex % 2 === 0) bin.push(bracketIndex + 1)\r\n\r\n            /**\r\n             * Searching open-bracket. Popping off the last bracket in bin then compare it.\r\n             */\r\n            else if (bin.pop() !== bracketIndex) return `${expression} UNBALANCED.`\r\n        }\r\n\r\n        /**\r\n         * If bin are empty - brackets are equal\r\n         */\r\n\r\n        return `${expression} BALANCED.`\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {MathMatrix} from \"./math-matrix\";\r\nimport {MathBrackets} from \"./math-brackets\";\r\n\r\nexport class Math extends React.PureComponent  {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"math\">\r\n                <MathMatrix/>\r\n                <MathBrackets/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\r\n\r\nimport {withGithubRepos} from \"../redux/containers/github-repos/with-github-repos\";\r\nimport {GithubRepos} from \"../pages/github-repos/github-repos\";\r\nimport {Math} from \"../pages/math/math\";\r\n\r\nexport class MainLayout extends React.PureComponent {\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Route path=\"/github-repos\" component={withGithubRepos(GithubRepos)}/>\r\n                <Route path=\"/math\" component={Math}/>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {RepoItemType} from \"../types/github-repos\";\r\nimport {combineReducers} from \"redux\";\r\nimport * as actions from './../types/github-repos';\r\nimport {ActionType} from \"typesafe-actions\";\r\nimport {GithubRepos} from \"../../pages/github-repos/github-repos\";\r\n\r\n// type GithubReposAction = ActionType<typeof actions>;\r\n\r\n\r\n\r\nexport interface GithubReposState {\r\n    repositoryList: Array<RepoItemType>\r\n}\r\n\r\nconst initialState: GithubReposState = {\r\n    repositoryList: []\r\n}\r\n\r\nexport default function githubReposReducer(state: GithubReposState = initialState, action: actions.ReceiveReposAction): GithubReposState {\r\n    switch (action.type) {\r\n        case actions.RECEIVE_ORGANIZATION_REPOSITORIES: {\r\n            return {...state, repositoryList: action.payload};\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n","import {ACTIONS_REQ_ERROR, ACTIONS_REQ_STATUS} from \"../types/req-status\";\r\n\r\nexport const REQ_STATUS = 'REQ_STATUS';\r\nexport const REQ_ERROR = 'REQ_ERROR';\r\n\r\nexport function reqStatusAction(isFetching: ACTIONS_REQ_STATUS) {\r\n    return {\r\n        type: REQ_STATUS,\r\n        payload: isFetching\r\n    };\r\n}\r\n\r\nexport function reqErrorAction(error: ACTIONS_REQ_ERROR) {\r\n    return {\r\n        type: REQ_ERROR,\r\n        payload: error\r\n    };\r\n}\r\n","import * as reqStatusAction from '../actions/req-status';\r\nimport {REDUCER_ACTION} from \"../types/req-status\";\r\n\r\nconst initialState = {\r\n    isFetching: false,\r\n    error: false\r\n};\r\n\r\nexport function reqStatusReducer(state = initialState, action: REDUCER_ACTION) {\r\n    switch (action.type) {\r\n        case reqStatusAction.REQ_STATUS:\r\n            return {...state, isFetching: action.payload};\r\n\r\n        case reqStatusAction.REQ_ERROR:\r\n            return {...state, error: action.payload};\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {combineReducers} from 'redux';\r\n\r\nimport githubReposReducer from './reducers/github-repos';\r\nimport {reqStatusReducer} from \"./reducers/req-status\";\r\n\r\nconst rootReducer = combineReducers({\r\n    githubRepos: githubReposReducer,\r\n    reqStatus: reqStatusReducer,\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport default rootReducer\r\n","import AXIOS from \"axios\"\r\n\r\nconst api = \"https://api.github.com\";\r\n\r\nexport const axios = {\r\n    get: (url, options) => AXIOS.get(url, options).catch(errorHandler),\r\n    post: (url, data, options) => AXIOS.post(url, data, options).catch(errorHandler),\r\n    patch: (url, data, options) => AXIOS.patch(url, data, options).catch(errorHandler),\r\n    put: (url, data, options) => AXIOS.put(url, data, options).catch(errorHandler),\r\n    delete: (url, options) => AXIOS.delete(url, options).catch(errorHandler)\r\n};\r\n\r\nfunction errorHandler(error) {\r\n    const status = error.response ? error.response.status : null;\r\n    switch (status) {\r\n        case 401: {\r\n            console.log('err 401')\r\n            break;\r\n        }\r\n        default: console.log('OK');\r\n    }\r\n    throw error;\r\n}\r\n\r\nexport function fetchOrganizationRepositoriesApi(organization = \"X7Becka\") {\r\n    console.log('API')\r\n    return axios.get(`${api}/orgs/${organization}/repos`)\r\n}\r\n","import { call, put, takeEvery } from 'redux-saga/effects';\r\nimport { fetchOrganizationRepositoriesApi } from '../utils/api';\r\nimport {receiveOrganizationRepositoriesAction} from '../actions/github-repos';\r\nimport * as types from \"../types/github-repos\";\r\nimport {reqErrorAction, reqStatusAction} from \"../actions/req-status\";\r\n\r\n\r\nexport function* watchGetOrganizationRepositories() {\r\n    yield takeEvery(types.FETCH_ORGANIZATION_REPOSITORIES, callGetOrganizationRepositories);\r\n}\r\n\r\nfunction* callGetOrganizationRepositories(action: types.ReceiveReposAction & types.FetchReposAction) {\r\n    try {\r\n        console.log(action, 'action')\r\n\r\n        // @ts-ignore\r\n        const response = yield call(fetchOrganizationRepositoriesApi, action.payload);\r\n        yield put(reqStatusAction(true));\r\n        yield put(receiveOrganizationRepositoriesAction(response.data));\r\n        yield put(reqStatusAction(false));\r\n    } catch(error) {\r\n        yield put(reqErrorAction(true));\r\n    }\r\n}\r\n","import { all, call } from 'redux-saga/effects';\r\nimport { watchGetOrganizationRepositories } from './sagas/github-repos';\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        call(watchGetOrganizationRepositories)\r\n    ]);\r\n}\r\n","import {applyMiddleware, createStore} from 'redux';\r\nimport {logger} from 'redux-logger';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport rootReducer from './root-reducer';\r\nimport rootSaga from \"./root-saga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware, logger)));\r\n\r\nsagaMiddleware.run(rootSaga)\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index';\nimport \"./index.scss\"\n\nimport {MainLayout} from './layouts/main-layout';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\"\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n    <Provider store={store}><React.StrictMode><MainLayout/></React.StrictMode></Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}